싱글톤 패턴
- static은 공간의 낭비가 심해 사용이 지양된다.
- 하나의 객체를 공유하는 디자인 패턴
- 필요할때만 객체를 생성,공유
- 만드는법
	- 생성자 접근제어자를 private로 바꾸기
	- 동일 클래스에 생성자 참조변수를 생성
	- 외부접근을 위해 참조변수를 반환하는 public메서드 생성
	- 참조변수에 인스턴스(public)메서드가 접근할 수 있도록 
		참조변수 및 public메서드에 static을 적용
	- 참조변수에 객체생성은 변수가null일때만 진행하도록 if문 사용
	public class Company {
		private static Company instance;

		private Company(){}

		public static Company getInstance(){
			if(instance == null){
				instance = new Company();

				}
			return instance;
		}
	}
	
-------------------------------------------------------------

상속
1. 상속이란?
	- 
2. 클래스 상속 문법

class 하위클래스 extends 상위클래스{
}

상속관계
C <- B <- A 

super
	- 상위클래스의 생성될 객체의(주소값을 가진) 참조 지역변수(super)
	- 상위클래스 생성자 메서드(super())

C()호출 -> C().super()=B() 호출 -> B().super():A() 호출 

다형성
	- 하위클래스가 상위클래스 자료형으로 자동형변환(묵시적 형변환)
	- 상위클래스가 하위클래스 자료형으로 형변환(명시적 형변환)

상위 클래스:일반적인 개념
하위 클래스:구체적인 개념

메서드 재정의(오버라이딩)

상위클래스와 동일한 명칭의 메서드를 하위 클래스 정의
-> 하위 클래스 메서드가 먼저 실행


다운 캐스팅과 instanceof


@Override
-> 재정의했음을 알려주는 명령
-> 컴파일러가 확인하고 인지함

-------------------------------------------------------------

추상클래스

추상적 - 메서드의 구현체가 정해지지 않은(추상메서드)
구체적 - 메서드의 구현체가 정해진
				
1. 추상 클래스란?
- 공통의 기능을 가진 설계틀을 제공하는 클래스
2. 추상 클래스 문법

- 메서드의 구현체가 정의x
- 메서드 앞에 abstract 키워드

3. 추상 클래스를 만드는이유

java.io

- 여러종류의 비슷한 함수를 하나의 형태로서 정의해 사용하기위해
예) 메서드모음 - 인터페이스
			메서드1
			메서드2
			메서드3
			메서드4(신규)
				메서드모음 변수명 = new 메서드;
				변수명.메서드1의 기능
				변수명.메서드2의 기능
				변수명.메서드3의 기능
				변수명.메서드4의 기능
		
-------------------------------------------------------------		
인터페이스(interface:설계)
- 추상 메서드만 정의
- 설계만을 위한 클래스
- 추상메서드만 인식(구현체 있으면 에러남)

1.인터페이스란?
interface 인터페이스명{
	
}


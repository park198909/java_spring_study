웹기초

개발환경 설정
	- Maven Project
		- 빌드 도구
		- 의존성 관리 도구
		- 환경 변수 설정
			- (1)C:\Users\Administrator\Desktop\박영근\apache-maven-3.8.8\bin
			- (2)%JAVA_HOME%\bin
			- 시스템 환경 변수 -> path -> (1),(2) 입력
			- 시스템 환경 변수 -> JAVA_HOME -> C:\Program Files\Java\jdk-11 입력
		- 프로젝트 생성(cmd창)
			- mvn archetype:generate
				- groupId : 소속 그룹, 회사 - 도메인방식을 거꾸로 입력(org.회사명...)
				- artifactId : 프로젝트명
				- package : groupId와 동일하게 설정
		- porm.xml 설정
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<maven.compiler.source>20</maven.compiler.source>	 <!-- 컴파일 버전-->
				<maven.compiler.target>20</maven.compiler.target> <!-- 배포 시 버전-->
			</properties>	<!-- 배포버전 : *.jar 또는 *.war -->
			<dependencies>	<!-- 의존성 설정 -->
				<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.11</version>
				<scope>test</scope>	<!--  -->
				</dependency>
			</dependencies>
				- scope 입력값
					compile	: 기본값(모두 포함-컴파일,배포,실행)
					runtime : 컴파일 미포함, 실행 포함
					provided : 컴파일 포함, 배포 미포함
					test : 테스트만 포함
			- 메이븐은 의존성을 중앙에서 통제
			- 의존모듈이 의존하는 모듈은 재귀적으로 자동설치된다.
				- junit -> org.hamcrest
		- mvn 실행 명령
			- 컴파일 : mvn compile : .java -> .class
					- target폴더생성
				- 기존 컴파일된 class파일 삭제X, 일괄 컴파일class
				- 기존 컴팡일된 class파일과 충돌
			- 컴파일 제거 : mvn clean 
				- target폴더 제거
			- 제거 후 컴파일 : mvn clean compile
			- 배포파일생성 : mvn package
				- *.jar파일을 target폴더에 생성
				- mvn test진행 후 실행
			- 테스트 수행 : mvn test
				- src/test/java 전체 테스트 케이스를 실행
		- 저장위치 별 기능	
			- src/main/java : 개발 중 코드 - 클래스패스 
			- src/test/java : 테스트용 코드 - 클래스패스 
				- 클래스패스 : .class를 자동 인식하는 경로 
			- src/main/resources : 정적자원(설정파일- properties, xml) 및 클래스패스 저장
			- target : 클래스패스 : 컴파일소스, 배포, 자동 생성 클래스 저장
			- src/main/webapp
				- src/main/webapp/META-INF
				- src/main/webapp/WEB-INF
		- 기본 설정
			- src에 new디렉토리 생성(java,test)
			- main에 new디렉토리 생성(webapp)
				- webapp에 new디렉토리 생성(META-INF, WEB-INF)
				
			
	- Tomcat9
		- settings -> plugins -> smart tomcat 검색 및 설치
		- 브라우저 -> tomcat9 검색 및 다운로드(apache-tomcat-9.0.74)
		- 압축해제 후 폴더를 mvn이 있는 위치에 붙여넣기
		- 서버 설정
			- compile configuration -> add new -> smart tomcat
				- tomcat server : tomcat9폴더 선택
				- deployment directory 를 webapp폴더로 지정
				- 서버포트 3000번 설정(기본 8080)
		- 의존성 설정
			<build>
				<plugins>
				  <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.0.0</version>
				  </plugin>
				</plugins>
			  </build>

------------------------------------목차 구분선---------------------------------------------- 
	
TDD(Test-driven Development) : 테스트 주도 개발
	- Junit5 모듈 연동
		- mvn repository 방문 -> jupiter api junit검색 -> JUnit Jupiter (Aggregator) 5.9.2
			->의존성 복사 -> porm.xml <dependencies>여기붙여넣기</dependencies>
		- mvn repository 방문 -> maven surefire plugin검색 -> Maven Surefire Plugin 3.0.0
			->의존성 복사 -> porm.xml에 붙여넣기
			<build>
				<plugins>
				  <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.0.0</version>
				  </plugin>
				</plugins>
			  </build>
		- 메이븐 업데이트
	
	- 에노테이션
		- @Test : 메서드()를 테스트 케이스(단위테스트)로 적용
			- 값의 일치
			- 참,거짓 판별
			- 특정 예외 발생하는지
			- 특정 예외 발생하지 않는지
			- null, not null체크
		- @DisplayName("문자열") : 메서드()의 테스트명을 문자열로 바꿔서 출력
		- @Disabled : 메서드()를 테스트를 하지 않고 넘어감
		- @TempDir : File을 임시파일로 생성하여 저장, 종료 후 삭제
		- @Timeout : 테스트메서드()의 수행에 제한시간 지정
		- @BeforeEach : 메서드()의 수행 시점을 변경
			- 테스트메서드() 실행 전 수행
			- 테스트 전 사전작업에 사용
		- @AfterEach : 메서드()의 수행 시점을 변경
			- 테스트메서드() 실행 후 수행
			- 테스트 후 마무리 작업에 사용
		- @BeforeAll : 메서드()의 수행 시점을 변경
			- 최초 테스트메서드()의 수행 전 1회만 수행 
			- static메서드로 정의 필수
		- @AfterAll : 메서드()의 수행 시점을 변경
			- 최초 테스트메서드()의 수행 전 1회만 수행 
			- static메서드로 정의 필수
		
	- Junit 주요 메서드(Assertions클래스)
		- assertEquals(expected, actual) : 기대값과 입력값이 같으면 통과, 아니면 에러발생
		- assertNotEquals(unexpected, actual)
		
		- assertSame (Object expected, Object actual) : 동일성 비교
		- assertNotSame(Object unexpected, Object actual)
		
		- assertTrue(boolean condition) : 값이 true인지
		- assertFalse(boolean condition)
		
		- assertNull(Object actual) : 값이 null인지
		- assertNotNull(Object actual)
		
		- fail() : 실패로 처리
		
		- assertThrows(Class<T> expectedType, Executable executable) : 예외가 발생하는지
		- assertDoesNotThrow(Executable executable)
		
		- assertAll() : 모든 assert메서드 실행(실패한 메서드가 있어도 이후 메서드 실행)
			- 회원가입기능(Service)
				- 값을 저장, 조회만을 목적으로 하는 클래스
					- DTO(Data Transfer Object)
					- VO(Value Object)
					- 일반적으로 변수, getter, setter만 존재
				
				
		
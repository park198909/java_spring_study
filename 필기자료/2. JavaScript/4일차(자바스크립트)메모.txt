자바스크립트

내장 생성자
1. Object
	- 모든 객체의 출처
	- {} -> [[Prototype]] Object.prototype		// new Object
		const obj = {};			// const obj = new Object;
*** 생성자객체는 함수객체만 가능하다. ***

2. String(매우 중요함) - 래퍼 생성자 객체	-> 실행 시 자동으로 변수를 감싸고 연산 수행 후 다시 벗겨진다.
	const str = 'abc'; -> str은 변수이다.
	const str2 = str.concat('def','ghi');-> concat을 실행하기 위해 str을 String으로 변환하여 실행 후 다시 변수로 환원한다3. Number - 래퍼 생성자 객체 -> 값을 숫자로 변환
	NaN( Not A Number - 숫자가 아닐 때) 기준이 엄격하다.
	const b = Number(a) -> a를 숫자의 형태로 b에 대입한다.

4. Boolean
	Boolean(값) -> 값을 실제 논리값으로 변환

5. Array - 배열 생성자 객체
	- 많은 데이터를 한꺼번에 담아서 다룰때 사용
***  ***

6. Date - 날짜
	.get~ : 날짜를 획득하여 반환
	.set~ : 획득한 날짜를 수정

7. Error - 에러 발생에 대처하기 위한 생성자객체
	// 오류가 발생할 수 있는 코드
	throw new Error(...); // 에러발생 - throw(던지다) : 에러가 발생하면 ...을 출력 후 catch로 보낸다.
} catch(Error 객체) {   // 발생한 에러에 대한 정보
	// 오류가 발생할 경우 실행할 코드
}

===========================================================================

내장 객체
1. JSON
	- 데이터를 교환하기 위한 수단 : JSON 문자열 -> 타 플랫폼 언어를 JSON문자열로 변환하여 소통
	- parse : JSON문자열 -> javascriot 객체
		const obj = JSON.parse(json);
	- stringify : javascriot 객체 -> JSON문자열
		const json = JSON.stringify(obj);

2. Math - 수학 관련 기능
	Math.abs(절대값);
		const a = Math.abs(-3);	// a=3
	Math.max(최대값);
	Math.min(최소값);
	Math.sign(부호);		//양수는 1, 음수 -1 반환
	Math.round(반올림);
	Math.ceil(올림);
	Math.floor(버림);
	Math.random(0~1난수);
	Math.pow(값,제곱수);

===========================================================================

전역 속성
1. undefined
2. NaN
3. Infinity

전역함수(매우 중요함)
1. parseInt : 정수로 변환
2. parseFloat : 실수로 변환
3. isNaN() -> Number("값") -> NaN 발생 -> true, X -> false

*** 
is~ -> ~인지 아닌지 
parse -> 변환
parseInt(값) -> 값을 정수로 변환
parseFlaot(값) -> 값을 실수로 변환
***

===========================================================================

Array생성자 객체(배열)
- 많은 데이터를 담기 위해서
- 많은 데이터를 쉽게 처리하기 위해서

1. 생성방법
const a = new Array(값); -> 값은 배열 공간의 갯수를 입력
const a = new Array(값,값,값...); -> 값들이 들어가 있는 배열 객체 생성 
const a = [값,값...] -> new Array();와 동일

2. 배열객체가 되는 조건
	1) 배열생성자(Array.prototype)를 상속할 것
	2) 속성명이 숫자일 것
	3) length 속성이 존재할 것

배열객체의 속성명에 접근
참조변수.속성명(숫자로된 속성명 앞에 .사용 불가) 	-> 참조변수.1	(X)
참조변수[속성명]					-> 참조변수[1]	(O)

존재하는 속성에 대입 - 변경
존재하지 않는 속성에 대입 - 추가
delete 속성; - 제거, 해당 속성위치는 '비어있음'으로 됨

***
배열객체는 추가,수정,삭제 전용 메서드가 존재한다.(Array.prototype)  
추가
	push(...items) : 끝에 추가
	unshift(...items) : 앞에 추가

수정
	
삭제(꺼낸다)
	pop() : 끝의 요소를 제거
	shift() : 맨 앞의 요소를 제거

splice : 중간의 요소를 삭제,교체,추가
array.splice(1,1) -> 1번 째부터 1개를 삭제
fruits.splice(1,2,"A","B"); -> 1번 째부터 2개를 삭제하고 A, B를 삽입
fruits.splice(1,0,"A","B"); -> 1번 째 뒤에 A, B를 삽입
***

*** 
객체의 속성 값 : 	원시타입(숫자,문자,논리값,undefined,null...), 
		객체(+함수객체...)

배열 객체의 값 :	원시타입(숫자,문자,논리값,undefined,null...), 
		객체(+함수객체...)

-> '배열객체'는 객체(요소 간 물리적공간이 연결X) 이고 배열(요소 간 물리적공간이 연결되어있다.) 이 아니다.


Symbol.iterator이 존재 -> for...of 구문이 사용가능해 진다.
for(let ch of str){		// str의 각각의 요소를 ch에 저장
	console.log(ch);	// ch를 저장한 순서대로 출력
}

@@객체명 -> @@는 심볼을 의미한다.
*** 

***
함수를 매개변수로 사용
Array.foreach(함수);
	함수의 반환값을 출력
화살표함수(람다식느낌나는거) - 생성자함수로 사용이 불가하다(prototype요소가 없음)
	function(num1){ return num1; } ------>  n => n;
	function(){ return 0; } ------>  () => 0;
***











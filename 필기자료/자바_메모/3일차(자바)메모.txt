1. 배열
- 같은 자료형
- 순차적인 구조로 위치확인 및 조회 용이

- 기본자료형 배열
	- 일차원 배열
		1)
		2)
		3)
		4)
		5)
		6)

	- 다차원 배열
		1) 이차원 배열 - 평면배열
			- 자료형[][] 배열명 = new 자료형[행][열];
			- 자료형[][] 배열명 = {{값1,값2,값3},{값1,값2,값3}};


		2) 삼차원 배열 - 입체배열
			자료형[][][] 배열명 = new 자료형[가로][세로][높이];

- 참조자료형 배열


-------------------------------------------------------------

2. 객체
- 객체란? object(사물,대상)
- 다른 속성과 행위의 협동(유기적인 연결) 상호작용 목적의 달성

	1) 객체 지향 프로그래밍
	2) 클래스
		- 클래스 : 객체를 만들수 있는 설계도-> 속성(변수)+행위(함수)+재료(메모리)
		- class 클래스명{
				멤버 변수					// 변수를 정의
				멤버 함수(=메서드)		// 함수를 정의		
		}
		- new 연산자
			- new 클래스명 동일 함수();
		- 마침표 연산자
			- 변수.함수명();
	3) 클래스명 지정 관례
		- 알파벳,숫자,[특수문자]
		- 숫자는 맨 앞에 X
		- 단어와 단어 사이에 첫글자들은 대문자로 한다.(관례 -> 파스칼표기법)
			예) class OrderInfo
	4) 클래스와 인스턴스
		- 인스턴스(Instance) : 실체(실제로 존재한다.) -> 객체
		- 클래스는 설계도(정의)일 뿐, 실체가 된 객체는 인스턴스라고 부른다.
		- 대상 instanceof 원본; -> 대상은 원본로부터 생성된 객체인가?(참,거짓)
	5) 패키지
		- 비슷한 기능을 가진 클래스끼리 통합한 폴더
	6) 함수
		- 수행할 기능을 정의한 코드
		- 반환값의타입(자료형) 함수명 (매개변수1,매개변수2,...){

				// 매개변수들을 토대로 기능을 수행하는 코드

				return 반환값;
			}
			- 반환값의 타입 = void 는 void라는 값을 반환한다.
		- 함수호출 및 값 반환
			- 함수명(값,...);
			- 함수는 호출 시 공간을 할당받아 연산하고 
				연산종료 시 공간을 해제(반환)한다.
			- 스택 메모리 : 함수호출시 연산을 위해 임시할당되는 공간
			- 함수가 정의된 코드 : 지역 -> 지역에서 정의된 변수 : 지역변수
				- 지역변수는 함수가 종료되면 소멸된다.
		- 자료구조
			- 큐(queue)
				- 가장 처음 저장된 자료가 가장 먼저 꺼내는게 가능하다.
				- 선입선출
			- 스택(stack)
				- 함수(메서드)가 저장되는 영역
				- 가장 마지막 저장자료가 가장 먼저 꺼내는게 가능하다.
				- 먼저 저장된 값을 보려면 그 뒤에 저장된 모든값을 역순으로 봐야한다.
				- 후입선출
			- 힙(heap)
				- 객체(인스턴스)가 저장되는 영역
				- 스택영역에 있는 함수는 이 인스턴스의 주소를 가지고있는
					참조자료형 변수이다.
			- 데이터(data)
				- 코드와 상수가 저장되는 영역
				- 함수가 참고할 수 있는 정보(코드&상수)가 저장되는 영역
		- main함수
			- 모든 애플리케이션의 시작 함수
			- JVM을 호출하는 함수
			- main함수는 가장 최초로 실행되서 가장 마지막까지 실행되어야 하므로 
				함수는 스택구조(후입선출)에서 동작해야 한다
	7) 참조자료형
		- 기본자료형 외의 모든 자료형
		- 인스턴스(객체)의 참조 주소값만을 가지고 있는 자료형
		- 주소값만 가지고 있기에 4바이트의 크기로 충분하다.
	8) 생성자 함수
		- 클래스명과 동일한 함수명을 갖는다.
		- 클래스명 변수명 = new 클래스명(); 
			- 반환된 값을 변수에 반환하여 주소를 저장한다.
		- 생성자메서드의 실행결과 객체의 주소값(힙 영역)을 반환한다.
		- 클래스에 생성자 함수를 따로 정의하지 않으면 기본생성자 함수가 정의된다.
			- 기본생성자 함수 형태 : 기본생성자는 컴파일러에 의해 관리된다.
				public 클래스명(){
				
				}
				- 반환값이 존재하면 객체에 접근할 수 없기에 반환값이 막혀있다.
				- 생성자함수의 반환값은 변경이 불가하다.(return사용 불가)
				- 생성자함수에는 '객체가 생성된 이후의 작업'이 가능하다.
				- 생성자함수에는 '객체의 멤버변수 초기화 작업'이 가능하다.
	9) 함수의 시그니쳐
		- 함수의 시그니쳐가 다르면 다른 함수이다.
		- 함수의 시그니쳐가 같으면 중복정의로 오류가 발생한다.
		- 함수를 구분하는 요소는 반환값,매개변수,함수명 등이 있다.
		- 메서드 오버로드
			- 함수의 반환값이나 매개변수를 다르게 하여 여러개를 정의가능
자바
1.실습환경 구축
1) 에디터 설치 - 인텔리J
		인텔리J 홈페이지 - 다운로드 - 커뮤니티에디션버전 - 실행 
		- create desktop shotcut 체크 - 설치완료

2) java API 문서 다운로드
		자바 다운로드 -> documentation download -> 
		Java SE Development Kit 8u361 Documentation 다운로드
		-> 압축풀기
		
2. 자바의 특징
1) 기존 언어의 단점
		C, C++ : OS에 컴파일리 종속됨, OS마다 다른 라이브러리 필요

2) 자바언어를 사용하는 이유 및 실행순서
		Java의 모토 : Write once, Run Everywhere 
		java코드(.java)->컴파일->클래스파일(.class)->JVM(번역기)
		-> OS전용소스(바이트변환) -> 실행 

		JVM : Java Virtual Machine-자바가상머신
		
		과거에는 JVM의 속도문제가 있었으나 개선되어 문제가 없어짐
		
3) 자바생성
프로젝트 생성 -> 패키지 생성 -> .java파일(클래스파일)

-------------------------------------------------------------

변수와 자료형
1. 변수 : 공간(메모리)의 이름

	- 변수선언 : 변수의 이름 짓기 -> 자료형 변수명;
	- 변수초기화 : 최초로 변수에 값을 대입 -> 변수명 = 값;
		- 자료형 변수명 = 값; 가능
	- 변수명 정하기
		1) 알파벳,숫자,특수문자(_,$)으로 구성
		2) 숫자는 변수명 맨 앞에 올수 없다.
		3) 예약어(if,for,...등 기존에 있는 명칭)는 사용불가
		4) 의미가 있는 단어로 구성
			- int noOfStudent
		5) 변수명 표기 관례
			- 카멜 표기법 : 단어의 시작은 대문자, 첫글자는 소문자
				- int num_max(O)
				- int 1st(X)
				- int $money(O)
	- 자료형 : 변수(메모리)의 크기
		1) 반도체(메모리)의 최소단위는 1bit, 1Byte = 8bit
			- 양수와음수 표현 -> 8bit중 1bit를 부호비트로 사용
			- 1Byte 수치표현 -> -2^7 ~ (2^7-1) 까지 표현가능
			- 2Byte 수치표현 -> -2^15 ~ (2^15-1) 까지 표현가능
			- 4Byte 수치표현 -> -2^31 ~ (2^31-1) 까지 표현가능
			- 8Byte 수치표현 -> -2^63 ~ (2^63-1) 까지 표현가능
		2) 기본 자료형 
			- 변수만 선언했을 경우 초기값이 없다.
				정수:0, 실수:0.0, 논리형:false
			- 숫자(정수,실수,문자)
				- 정수
						Byte 	: 1byte
						short : 2byte
						int		: 4byte
						long	: 8byte
						- 모든 정수는 int로 해보고 안되면 자료형을 바꾸기 떄문에 자주쓰지않는 형식을 쓸때는 알려줄 필요가 있다. 
						long num1 = 100000000000L; 
						// 값 뒤에 L을 붙여 인식시키기
						또한, 크기가 작더라도 int를 사용하는게 가장 효율적이다.					
				- 실수
						float 	: 4byte
						double 	: 8byte 
						- 모든 실수는 double부터 해보기 때문에 double을 사용하는게
							효율적이다.	
						- float num4 = 10.123f; 
							// f를 입력해 float을 인식시킨다.
				- 문자
						char : 2,3Byte의 양의 정수
							- 키보드 A -> 숫자65로 변환 -> 2진수 변환 -> 컴퓨터인식
							- ASCII코드 -> 문자,특수문자를 숫자로 표현한 표
								- 1Byte 내에서 문자,특수문자 정의
								- 문자는 모두 양의 정수(unsigned) 이다. 0~255
							- 유니코드 -> 2,3Byte 문자-숫자표(한글표현가능)
				- 논리형
						boolean : 1byte;
				
		3) 참조 자료형 - 객체설명 때 진행
		4) 주석 - 설명(컴파일러가 무시하는 소스)(소스의 실행 배제)
				// 한줄주석
				/*
					 여러줄
					 여러줄 주석
				*/
				

2. 상수와 리터럴
	- 상수 선언하기
		- final 자료형 변수명;		// 변경 불가능한 변수
	- 최초의 값 대입(초기화) 후 변경이 불가능하다.
	- 상수 표현 관례
		- 대문자로 작성
		- 단어_단어_단어 방식으로 구성
	- 리터럴 상수 : 변수의 담기는 동일한 값은 1개만 메모리에 존재한다.
		- int num1=10, int num2=10 일 때 메모리에 존재하는 10은
			1개뿐 이고 이를 리터럴상수 라고 한다.
		- 재료가 되는 수,문자 
	
3. 형변환
			
	- 묵시적(자동) 형변환 : 작은 자료형->큰 자료형 변경시에는 자동으로 된다.
		- byte -> short -> int -> long -> float -> double
							char -> int -> long -> float -> double
		- 작은 자료형 -> 큰 자료형 대입 가능
		- 정수 자료형 -> 실수 자료형 대입가능
		- 연산 중에도 발생한다.
		- 실수 : 정수.소수점 -> 정수보다 표현범위가 넓다. -> 더 크고 정밀한 숫자	
	
	- 명시적 형변환 : 큰 자료형->작은 자료형 	: 데이터 유실 가능성 발생
								  실수  	->   정수		: 자동 형변환X
																	: 진행여부 확인 후 진행

-------------------------------------------------------------

1. 연산자

1) 항 : 연산에 사용되는 값
	- 단한연산
	- 이항연산
	- 삼항연산
	
2) 연산자 : 연산에 사용되는 기호
	- 대입연산자(=)
		- 값을 저장, 연산의 우선순위가 가장 낮다.
	- 부호연산자(+,-)
		- 단항연산, 부호반전(양수->음수,음수->양수)
	- 산술연산자(+,-,*,/,%)
		- 이항연산, 사칙연산
		- % : 나머지 연산
		- 우선순위 : *,/,%  >  +,-
		- 우선순위 강제적용 : (연산식) -> 다른 연산에도 적용가능
	- 증감연산자(++,--)
		- 단항연산
		- 1씩 증가(++)
			- num2 = num++;		// 대입 후 증가
			- num2 = ++num;		// 증가 후 대입
		- 1씩 감소(--) 
			- num2 = num--;		// 대입 후 감소
			- num2 = --num;		// 감소 후 대입
	- 비교연산자(>,<,>=,<=,==,!=)
			- 이항연산
			- 연산결과가 논리값(boolean)이다.
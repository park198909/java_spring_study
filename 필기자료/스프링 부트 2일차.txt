테스트
MockMvc

TDD-테스트 케이스 :설계
-구현->리팩토링->테스트

유닛테스트(JUNIT5)-기능(단위테스트)

행위테스트(MockMvc)


h2database
/h2-console (localhost 주소)
-테스트 데이터베이스주로 사용(주로내부에서만 쓰임)

perform(요청메서드('/url').param("이름","값")...)
  .andExpect - 예상상태
  .andDo 
  .andReturn()->응답 body 데이터를 반환

profile
(실제)-MySql연결
-Dspring.profiles.active=prod
->application-prod.properties

(테스트용)
application-test.properties
-------------------------------------------------------

Spring Data Jpa

JPA ->java persistence API (db처리) 
hibernate entitymanager  -구현체 (가장많이 씀) 

ORM 방식 (Object)
   - 데이터베이스간의 차이점이 있을경우 각 데이터베이스에 맞게 매핑
   ->db사용 프로그램을 중간에 바꿔도 알아서 매핑
객체지향과 관계형 데이터베이스 간의 패러다임이 불일치하기 때문입니다. 이를 해결하기 위해서 나온 기술이 ORM

persitance Context - 영속성 컨텍스 메모리 
 - Entity: 테이블과 매핑될수 있는 하나의 객체

엔티티 메니저- 엔티티 관리 
persist(엔티티) -영속성에서 관리되는 엔티티(변화감지)
detach()->영속성에서 관리되는 엔티티를 분리(변화감지X) 
find() 메소드: 영속성 컨텍스트에서 엔티티 조회, ( 영속성 컨텍스트에 없을 경우 데이터베이스에서 데이터를 찾아 영속성 컨텍스트에 저장)
merge(): detach되어있는 엔티티 -> 영속성으로 
persist() 메소드: 엔티티를 영속성 컨텍스트에 저장합니다.
remove()  : 엔티티 클래스를 영속성 컨텍스트에서 삭제합니다.
flush() :변화에 대한 부분을 일괄로 DB 반영

엔티티 매니저 팩토리
 - 매니저생성 

엔티티 생명주기 

find() -> flush() 가 조회되고 나서 

ddl-auto

(개발시 두가지 많이사용 )
   ★- create
       -스프링 시작되면 엔티티로 정의된 테이블 전체 삭제하고 다시추가 
      (DROP TABLE...)
   ★ -update
      -테이블을 삭제 x
      -테이블의 변경사항만 반영 

(아래두가지는 테이블을 변경하지 않음) ->실서버에서 많이사용 
    -valildate : 엔티티와 테이블간의 불일지 -> 예외발생
         
    -none: 아무것도 안하는 것 
  

@Getter @Setter @ToString 
 toString 사용시 순환구조 문제발생할수 있음 







--------------------------------------
<프로젝트구성>
-resource
application properties  설정파일
static - 정적자원 js, css
template -뷰 html
->messages파일도 여기로


spring boot Assistant -스프링 파일 자동완성 

Mvc Config 에 메세지소스설정 


spring boot starter test-> mock설정필요한데 이거는 애노테이션만 알려주면됨

layout은 의존라이브러리 추가 

spring.datasource.driver-class-name= org.h2.Driver

Exam03Application 실행시 부트 시작
    -@springBootTest 기본테스트 설정 다되어 있음 

Exam03ApplicationTests
    -@TestPropertySource(locations = "classpath:application-test.properties") 설정 프로퍼티 경로 지정
    -@AutoConfigureMockMvc  목설정 따로없이 사용 
    - 스프링문서에서 mockMVC import 요소 복붙 
api는 반드시 구현체가 있어야함


->테스트 구현 부분 확인 

jpa 설정 
  - 1장 부분 복붙했음

spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
->db에 맞게 구현 됨 
